// Package notion provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/faetools/devtool version (devel) DO NOT EDIT.
package notion

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for BlockType.
const (
	BlockTypeAudio            BlockType = "audio"
	BlockTypeBookmark         BlockType = "bookmark"
	BlockTypeBreadcrumb       BlockType = "breadcrumb"
	BlockTypeBulletedListItem BlockType = "bulleted_list_item"
	BlockTypeCallout          BlockType = "callout"
	BlockTypeChildDatabase    BlockType = "child_database"
	BlockTypeChildPage        BlockType = "child_page"
	BlockTypeCode             BlockType = "code"
	BlockTypeColumn           BlockType = "column"
	BlockTypeColumnList       BlockType = "column_list"
	BlockTypeDivider          BlockType = "divider"
	BlockTypeEmbed            BlockType = "embed"
	BlockTypeEquation         BlockType = "equation"
	BlockTypeFile             BlockType = "file"
	BlockTypeHeading1         BlockType = "heading_1"
	BlockTypeHeading2         BlockType = "heading_2"
	BlockTypeHeading3         BlockType = "heading_3"
	BlockTypeImage            BlockType = "image"
	BlockTypeLinkPreview      BlockType = "link_preview"
	BlockTypeLinkToPage       BlockType = "link_to_page"
	BlockTypeNumberedListItem BlockType = "numbered_list_item"
	BlockTypeParagraph        BlockType = "paragraph"
	BlockTypePdf              BlockType = "pdf"
	BlockTypeQuote            BlockType = "quote"
	BlockTypeSyncedBlock      BlockType = "synced_block"
	BlockTypeTable            BlockType = "table"
	BlockTypeTableOfContents  BlockType = "table_of_contents"
	BlockTypeTableRow         BlockType = "table_row"
	BlockTypeTemplate         BlockType = "template"
	BlockTypeToDo             BlockType = "to_do"
	BlockTypeToggle           BlockType = "toggle"
	BlockTypeUnsupported      BlockType = "unsupported"
	BlockTypeVideo            BlockType = "video"
)

// Defines values for CodeLanguage.
const (
	CodeLanguageAbap         CodeLanguage = "abap"
	CodeLanguageArduino      CodeLanguage = "arduino"
	CodeLanguageBash         CodeLanguage = "bash"
	CodeLanguageBasic        CodeLanguage = "basic"
	CodeLanguageC            CodeLanguage = "c"
	CodeLanguageC1           CodeLanguage = "c++"
	CodeLanguageC2           CodeLanguage = "c#"
	CodeLanguageClojure      CodeLanguage = "clojure"
	CodeLanguageCoffeescript CodeLanguage = "coffeescript"
	CodeLanguageCss          CodeLanguage = "css"
	CodeLanguageDart         CodeLanguage = "dart"
	CodeLanguageDiff         CodeLanguage = "diff"
	CodeLanguageDocker       CodeLanguage = "docker"
	CodeLanguageElixir       CodeLanguage = "elixir"
	CodeLanguageElm          CodeLanguage = "elm"
	CodeLanguageErlang       CodeLanguage = "erlang"
	CodeLanguageF            CodeLanguage = "f#"
	CodeLanguageFlow         CodeLanguage = "flow"
	CodeLanguageFortran      CodeLanguage = "fortran"
	CodeLanguageGherkin      CodeLanguage = "gherkin"
	CodeLanguageGlsl         CodeLanguage = "glsl"
	CodeLanguageGo           CodeLanguage = "go"
	CodeLanguageGraphql      CodeLanguage = "graphql"
	CodeLanguageGroovy       CodeLanguage = "groovy"
	CodeLanguageHaskell      CodeLanguage = "haskell"
	CodeLanguageHtml         CodeLanguage = "html"
	CodeLanguageJava         CodeLanguage = "java"
	CodeLanguageJavaccc      CodeLanguage = "java/c/c++/c#"
	CodeLanguageJavascript   CodeLanguage = "javascript"
	CodeLanguageJson         CodeLanguage = "json"
	CodeLanguageJulia        CodeLanguage = "julia"
	CodeLanguageKotlin       CodeLanguage = "kotlin"
	CodeLanguageLatex        CodeLanguage = "latex"
	CodeLanguageLess         CodeLanguage = "less"
	CodeLanguageLisp         CodeLanguage = "lisp"
	CodeLanguageLivescript   CodeLanguage = "livescript"
	CodeLanguageLua          CodeLanguage = "lua"
	CodeLanguageMakefile     CodeLanguage = "makefile"
	CodeLanguageMarkdown     CodeLanguage = "markdown"
	CodeLanguageMarkup       CodeLanguage = "markup"
	CodeLanguageMatlab       CodeLanguage = "matlab"
	CodeLanguageMermaid      CodeLanguage = "mermaid"
	CodeLanguageNix          CodeLanguage = "nix"
	CodeLanguageObjectiveC   CodeLanguage = "objective-c"
	CodeLanguageOcaml        CodeLanguage = "ocaml"
	CodeLanguagePascal       CodeLanguage = "pascal"
	CodeLanguagePerl         CodeLanguage = "perl"
	CodeLanguagePhp          CodeLanguage = "php"
	CodeLanguagePlainText    CodeLanguage = "plain text"
	CodeLanguagePowershell   CodeLanguage = "powershell"
	CodeLanguageProlog       CodeLanguage = "prolog"
	CodeLanguageProtobuf     CodeLanguage = "protobuf"
	CodeLanguagePython       CodeLanguage = "python"
	CodeLanguageR            CodeLanguage = "r"
	CodeLanguageReason       CodeLanguage = "reason"
	CodeLanguageRuby         CodeLanguage = "ruby"
	CodeLanguageRust         CodeLanguage = "rust"
	CodeLanguageSass         CodeLanguage = "sass"
	CodeLanguageScala        CodeLanguage = "scala"
	CodeLanguageScheme       CodeLanguage = "scheme"
	CodeLanguageScss         CodeLanguage = "scss"
	CodeLanguageShell        CodeLanguage = "shell"
	CodeLanguageSql          CodeLanguage = "sql"
	CodeLanguageSwift        CodeLanguage = "swift"
	CodeLanguageTypescript   CodeLanguage = "typescript"
	CodeLanguageVbNet        CodeLanguage = "vb.net"
	CodeLanguageVerilog      CodeLanguage = "verilog"
	CodeLanguageVhdl         CodeLanguage = "vhdl"
	CodeLanguageVisualBasic  CodeLanguage = "visual basic"
	CodeLanguageWebassembly  CodeLanguage = "webassembly"
	CodeLanguageXml          CodeLanguage = "xml"
	CodeLanguageYaml         CodeLanguage = "yaml"
)

// Defines values for Color.
const (
	ColorBlue             Color = "blue"
	ColorBlueBackground   Color = "blue_background"
	ColorBrown            Color = "brown"
	ColorBrownBackground  Color = "brown_background"
	ColorDefault          Color = "default"
	ColorGray             Color = "gray"
	ColorGrayBackground   Color = "gray_background"
	ColorGreen            Color = "green"
	ColorGreenBackground  Color = "green_background"
	ColorOrange           Color = "orange"
	ColorOrangeBackground Color = "orange_background"
	ColorPink             Color = "pink"
	ColorPinkBackground   Color = "pink_background"
	ColorPurple           Color = "purple"
	ColorPurpleBackground Color = "purple_background"
	ColorRed              Color = "red"
	ColorRedBackground    Color = "red_background"
	ColorYellow           Color = "yellow"
	ColorYellowBackground Color = "yellow_background"
)

// Defines values for FileType.
const (
	FileTypeExternal FileType = "external"
	FileTypeFile     FileType = "file"
)

// Defines values for FileWithCaptionType.
const (
	FileWithCaptionTypeExternal FileWithCaptionType = "external"
	FileWithCaptionTypeFile     FileWithCaptionType = "file"
)

// Defines values for FormulaType.
const (
	FormulaTypeBoolean FormulaType = "boolean"
	FormulaTypeDate    FormulaType = "date"
	FormulaTypeNumber  FormulaType = "number"
	FormulaTypeString  FormulaType = "string"
)

// Defines values for IconType.
const (
	IconTypeEmoji    IconType = "emoji"
	IconTypeExternal IconType = "external"
	IconTypeFile     IconType = "file"
)

// Defines values for LinkToPageType.
const (
	LinkToPageTypeDatabaseId LinkToPageType = "database_id"
	LinkToPageTypePageId     LinkToPageType = "page_id"
)

// Defines values for MentionType.
const (
	MentionTypeDatabase    MentionType = "database"
	MentionTypeDate        MentionType = "date"
	MentionTypeLinkPreview MentionType = "link_preview"
	MentionTypePage        MentionType = "page"
	MentionTypeUser        MentionType = "user"
)

// Defines values for NumberConfigFormat.
const (
	NumberConfigFormatBaht             NumberConfigFormat = "baht"
	NumberConfigFormatCanadianDollar   NumberConfigFormat = "canadian_dollar"
	NumberConfigFormatChileanPeso      NumberConfigFormat = "chilean_peso"
	NumberConfigFormatColombianPeso    NumberConfigFormat = "colombian_peso"
	NumberConfigFormatDanishKrone      NumberConfigFormat = "danish_krone"
	NumberConfigFormatDirham           NumberConfigFormat = "dirham"
	NumberConfigFormatDollar           NumberConfigFormat = "dollar"
	NumberConfigFormatEuro             NumberConfigFormat = "euro"
	NumberConfigFormatForint           NumberConfigFormat = "forint"
	NumberConfigFormatFranc            NumberConfigFormat = "franc"
	NumberConfigFormatHongKongDollar   NumberConfigFormat = "hong_kong_dollar"
	NumberConfigFormatKoruna           NumberConfigFormat = "koruna"
	NumberConfigFormatKrona            NumberConfigFormat = "krona"
	NumberConfigFormatLeu              NumberConfigFormat = "leu"
	NumberConfigFormatLira             NumberConfigFormat = "lira"
	NumberConfigFormatMexicanPeso      NumberConfigFormat = "mexican_peso"
	NumberConfigFormatNewTaiwanDollar  NumberConfigFormat = "new_taiwan_dollar"
	NumberConfigFormatNewZealandDollar NumberConfigFormat = "new_zealand_dollar"
	NumberConfigFormatNorwegianKrone   NumberConfigFormat = "norwegian_krone"
	NumberConfigFormatNumber           NumberConfigFormat = "number"
	NumberConfigFormatNumberWithCommas NumberConfigFormat = "number_with_commas"
	NumberConfigFormatPercent          NumberConfigFormat = "percent"
	NumberConfigFormatPhilippinePeso   NumberConfigFormat = "philippine_peso"
	NumberConfigFormatPound            NumberConfigFormat = "pound"
	NumberConfigFormatRand             NumberConfigFormat = "rand"
	NumberConfigFormatReal             NumberConfigFormat = "real"
	NumberConfigFormatRinggit          NumberConfigFormat = "ringgit"
	NumberConfigFormatRiyal            NumberConfigFormat = "riyal"
	NumberConfigFormatRuble            NumberConfigFormat = "ruble"
	NumberConfigFormatRupee            NumberConfigFormat = "rupee"
	NumberConfigFormatRupiah           NumberConfigFormat = "rupiah"
	NumberConfigFormatShekel           NumberConfigFormat = "shekel"
	NumberConfigFormatWon              NumberConfigFormat = "won"
	NumberConfigFormatYen              NumberConfigFormat = "yen"
	NumberConfigFormatYuan             NumberConfigFormat = "yuan"
	NumberConfigFormatZloty            NumberConfigFormat = "zloty"
)

// Defines values for ParentType.
const (
	ParentTypeBlockId    ParentType = "block_id"
	ParentTypeDatabaseId ParentType = "database_id"
	ParentTypePageId     ParentType = "page_id"
	ParentTypeWorkspace  ParentType = "workspace"
)

// Defines values for PropertyType.
const (
	PropertyTypeCheckbox       PropertyType = "checkbox"
	PropertyTypeCreatedBy      PropertyType = "created_by"
	PropertyTypeCreatedTime    PropertyType = "created_time"
	PropertyTypeDate           PropertyType = "date"
	PropertyTypeEmail          PropertyType = "email"
	PropertyTypeFiles          PropertyType = "files"
	PropertyTypeFormula        PropertyType = "formula"
	PropertyTypeLastEditedBy   PropertyType = "last_edited_by"
	PropertyTypeLastEditedTime PropertyType = "last_edited_time"
	PropertyTypeMultiSelect    PropertyType = "multi_select"
	PropertyTypeNumber         PropertyType = "number"
	PropertyTypePeople         PropertyType = "people"
	PropertyTypePhoneNumber    PropertyType = "phone_number"
	PropertyTypeRelation       PropertyType = "relation"
	PropertyTypeRichText       PropertyType = "rich_text"
	PropertyTypeRollup         PropertyType = "rollup"
	PropertyTypeSelect         PropertyType = "select"
	PropertyTypeStatus         PropertyType = "status"
	PropertyTypeTitle          PropertyType = "title"
	PropertyTypeUrl            PropertyType = "url"
)

// Defines values for RichTextType.
const (
	RichTextTypeEquation RichTextType = "equation"
	RichTextTypeMention  RichTextType = "mention"
	RichTextTypeText     RichTextType = "text"
)

// Defines values for RollupType.
const (
	RollupTypeArray  RollupType = "array"
	RollupTypeDate   RollupType = "date"
	RollupTypeNumber RollupType = "number"
	RollupTypeString RollupType = "string"
)

// Defines values for RollupConfigFunction.
const (
	RollupConfigFunctionAverage           RollupConfigFunction = "average"
	RollupConfigFunctionCountAll          RollupConfigFunction = "count_all"
	RollupConfigFunctionCountEmpty        RollupConfigFunction = "count_empty"
	RollupConfigFunctionCountNotEmpty     RollupConfigFunction = "count_not_empty"
	RollupConfigFunctionCountUniqueValues RollupConfigFunction = "count_unique_values"
	RollupConfigFunctionCountValues       RollupConfigFunction = "count_values"
	RollupConfigFunctionMax               RollupConfigFunction = "max"
	RollupConfigFunctionMedian            RollupConfigFunction = "median"
	RollupConfigFunctionMin               RollupConfigFunction = "min"
	RollupConfigFunctionPercentEmpty      RollupConfigFunction = "percent_empty"
	RollupConfigFunctionPercentNotEmpty   RollupConfigFunction = "percent_not_empty"
	RollupConfigFunctionRange             RollupConfigFunction = "range"
	RollupConfigFunctionShowOriginal      RollupConfigFunction = "show_original"
	RollupConfigFunctionSum               RollupConfigFunction = "sum"
)

// Defines values for SortDirection.
const (
	SortDirectionAscending  SortDirection = "ascending"
	SortDirectionDescending SortDirection = "descending"
)

// Defines values for SyncedFromType.
const (
	SyncedFromTypeBlockId SyncedFromType = "block_id"
)

// Defines values for UserType.
const (
	UserTypeBot    UserType = "bot"
	UserTypePerson UserType = "person"
)

// Defines values for VideoType.
const (
	VideoTypeExternal VideoType = "external"
	VideoTypeFile     VideoType = "file"
)

// Style information which applies to the whole rich text object.
type Annotations struct {
	// Whether the text is **bolded**.
	Bold bool `json:"bold"`

	// Whether the text is code `style`.
	Code bool `json:"code"`

	// The color of the block.
	Color Color `json:"color"`

	// Whether the text is *italicized*.
	Italic bool `json:"italic"`

	// Whether the text is struck through.
	Strikethrough bool `json:"strikethrough"`

	// Whether the text is underlined.
	Underline bool `json:"underline"`
}

// A block object represents content within Notion. Blocks can be text, lists, media, and more. A page is a type of block, too!
//
// The optional fields are filled depending on the value of `type`.
type Block struct {
	// The archived status of the block.
	Archived bool `json:"archived"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion. A PDF can also have a caption.
	Audio    *FileWithCaption `json:"audio,omitempty"`
	Bookmark *Bookmark        `json:"bookmark,omitempty"`

	// Breadcrumb block objects do not contain any information within the breadcrumb property
	Breadcrumb *map[string]interface{} `json:"breadcrumb,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	BulletedListItem *Paragraph `json:"bulleted_list_item,omitempty"`

	// Callout block objects contain the following information within the callout field.
	Callout *Callout `json:"callout,omitempty"`

	// The title of the child page or database.
	ChildDatabase *Child `json:"child_database,omitempty"`

	// The title of the child page or database.
	ChildPage *Child `json:"child_page,omitempty"`

	// Code block objects contain this information within the `code` property.
	Code *Code `json:"code,omitempty"`

	// Columns are parent blocks for any supported block children, excluding columns. They do not contain any information within the column property. They can only be appended to column_lists.
	Column *map[string]interface{} `json:"column,omitempty"`

	// Column Lists are parent blocks for column children. They do not contain any information within the column_list property and can only contain children of type column.
	ColumnList *map[string]interface{} `json:"column_list,omitempty"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	CreatedBy *User `json:"created_by,omitempty"`

	// Date and time when this block was created. Formatted as an ISO 8601 date time string.
	CreatedTime time.Time `json:"created_time"`

	// Divider block objects do not contain any information within the divider property
	Divider *map[string]interface{} `json:"divider,omitempty"`

	// Embed blocks include block types that allow displaying another website within Notion.
	Embed *Embed `json:"embed,omitempty"`

	// Equation block objects contain this information within the `equation` property
	Equation *Equation `json:"equation,omitempty"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion. A PDF can also have a caption.
	File *FileWithCaption `json:"file,omitempty"`

	// Whether or not the block has children blocks nested within it.
	HasChildren bool `json:"has_children"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Heading1 *Paragraph `json:"heading_1,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Heading2 *Paragraph `json:"heading_2,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Heading3 *Paragraph `json:"heading_3,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	Id UUID `json:"id"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion. A PDF can also have a caption.
	Image *FileWithCaption `json:"image,omitempty"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	LastEditedBy *User `json:"last_edited_by,omitempty"`

	// Date and time when this block was last updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time `json:"last_edited_time"`

	// Link Preview block objects return the originally pasted url.
	//
	// NOTE: The link_preview block will only be returned as part of a response. It cannot be created via the API.
	LinkPreview *LinkPreview `json:"link_preview,omitempty"`
	LinkToPage  *LinkToPage  `json:"link_to_page,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	NumberedListItem *Paragraph `json:"numbered_list_item,omitempty"`

	// Always "block".
	Object string `json:"object"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Paragraph *Paragraph `json:"paragraph,omitempty"`

	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent Parent `json:"parent"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion. A PDF can also have a caption.
	Pdf *FileWithCaption `json:"pdf,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Quote       *Paragraph   `json:"quote,omitempty"`
	SyncedBlock *SyncedBlock `json:"synced_block,omitempty"`
	Table       *Table       `json:"table,omitempty"`

	// Table of contents block objects contain the following information within the `table_of_contents` property.
	TableOfContents *TableOfContents `json:"table_of_contents,omitempty"`

	// Table row blocks contain this within the table_row property.
	TableRow *TableRow `json:"table_row,omitempty"`
	Template *Template `json:"template,omitempty"`

	// To do block objects contain this information within the `to_do` property.
	ToDo *ToDo `json:"to_do,omitempty"`

	// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
	Toggle *Paragraph `json:"toggle,omitempty"`

	// Type of block.
	Type BlockType `json:"type"`

	// Some block types aren't available yet
	Unsupported *map[string]interface{} `json:"unsupported,omitempty"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Video *Video `json:"video,omitempty"`
}

// Type of block.
type BlockType string

// Blocks defines model for Blocks.
type Blocks []Block

// BlocksChildren defines model for BlocksChildren.
type BlocksChildren struct {
	Children Blocks `json:"children"`
}

// BlocksList defines model for BlocksList.
type BlocksList struct {
	Block      map[string]interface{} `json:"block"`
	HasMore    bool                   `json:"has_more"`
	NextCursor *string                `json:"next_cursor"`
	Object     string                 `json:"object"`
	Results    Blocks                 `json:"results"`
	Type       string                 `json:"type"`
}

// Bookmark defines model for Bookmark.
type Bookmark struct {
	Caption RichTexts `json:"caption"`

	// Bookmark link
	Url string `json:"url"`
}

// Bot defines model for Bot.
type Bot struct {
	Owner struct {
		Type      string `json:"type"`
		Workspace bool   `json:"workspace"`
	} `json:"owner"`
}

// Callout block objects contain the following information within the callout field.
type Callout struct {
	// The color of the block.
	Color Color `json:"color"`

	// Page or database icon. It is either an emoji or a file.
	Icon     Icon      `json:"icon"`
	RichText RichTexts `json:"rich_text"`
}

// CheckboxFilter defines model for CheckboxFilter.
type CheckboxFilter struct {
	// What the checkbox must be set to.
	Equals bool `json:"equals"`
}

// The title of the child page or database.
type Child struct {
	// Plain text of page title.
	Title string `json:"title"`
}

// Code block objects contain this information within the `code` property.
type Code struct {
	Caption *RichTexts `json:"caption,omitempty"`

	// Coding language in code block
	Language CodeLanguage `json:"language"`
	RichText RichTexts    `json:"rich_text"`
}

// Coding language in code block
type CodeLanguage string

// The color of the block.
type Color string

// Database defines model for Database.
type Database struct {
	// The archived status of the page.
	Archived bool `json:"archived"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Cover *File `json:"cover"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	CreatedBy *User `json:"created_by,omitempty"`

	// Date and time when this database was created. Formatted as an ISO 8601 date time string.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	Description RichTexts  `json:"description"`

	// Page or database icon. It is either an emoji or a file.
	Icon *Icon `json:"icon"`

	// A unique identifier for a page, block, database, user, or option.
	Id       UUID `json:"id"`
	IsInline bool `json:"is_inline"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	LastEditedBy *User `json:"last_edited_by,omitempty"`

	// Date and time when this database was updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time `json:"last_edited_time"`

	// Always "database".
	Object string `json:"object"`

	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent     *Parent         `json:"parent,omitempty"`
	Properties PropertyMetaMap `json:"properties"`
	Title      RichTexts       `json:"title"`

	// The URL of the Notion page.
	Url string `json:"url"`
}

// DatabaseQuery defines model for DatabaseQuery.
type DatabaseQuery struct {
	Filter *Filter `json:"filter,omitempty"`

	// The number of items from the full list desired in the response.
	PageSize int    `json:"page_size"`
	Sorts    *Sorts `json:"sorts,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	StartCursor *UUID `json:"start_cursor,omitempty"`
}

// Date defines model for Date.
type Date struct {
	// An ISO 8601 formatted date, with optional time. Represents the end of a date range.
	//
	// If `null`, this property's date value is not a range.
	End *time.Time `json:"end"`

	// An ISO 8601 format date, with optional time.
	Start time.Time `json:"start"`

	// Time zone information for start and end. Possible values are extracted from the IANA database and they are based on the time zones from Moment.js.
	//
	// When time zone is provided, start and end should not have any UTC offset. In addition, when time zone is provided, start and end cannot be dates without time information.
	//
	// If null, time zone information will be contained in UTC offsets in start and end.
	TimeZone *string `json:"time_zone"`
}

// Embed blocks include block types that allow displaying another website within Notion.
type Embed struct {
	Caption RichTexts `json:"caption"`
	Url     string    `json:"url"`
}

// Equation block objects contain this information within the `equation` property
type Equation struct {
	// A KaTeX compatible string
	Expression string `json:"expression"`
}

// Something went wrong
type Error struct {
	Code    string `json:"code"`
	Message string `json:"message"`
	Object  string `json:"object"`
	Status  int    `json:"status"`
}

// An external file is any URL that isn't hosted by Notion.
type ExternalFile struct {
	// Link to the externally hosted content.
	Url string `json:"url"`
}

// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
type File struct {
	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`

	// File objects contain this information within the `file` property.
	File *NotionFile `json:"file,omitempty"`

	// A string value corresponding to a filename of the original file upload
	Name *string `json:"name,omitempty"`

	// Type of this file object.
	Type FileType `json:"type"`
}

// Type of this file object.
type FileType string

// File objects contain data about files uploaded to Notion as well as external files linked in Notion. A PDF can also have a caption.
type FileWithCaption struct {
	Caption *RichTexts `json:"caption,omitempty"`

	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`

	// File objects contain this information within the `file` property.
	File *NotionFile `json:"file,omitempty"`

	// Type of this file object.
	Type FileWithCaptionType `json:"type"`
}

// Type of this file object.
type FileWithCaptionType string

// Files defines model for Files.
type Files []File

// Filter defines model for Filter.
type Filter struct {
	And      *Filters        `json:"and,omitempty"`
	Checkbox *CheckboxFilter `json:"checkbox,omitempty"`

	// A string the property must contain.
	Contains *string  `json:"contains,omitempty"`
	Or       *Filters `json:"or,omitempty"`

	// Filter by this property.
	Property *string     `json:"property,omitempty"`
	RichText *TextFilter `json:"rich_text,omitempty"`
}

// Filters defines model for Filters.
type Filters []Filter

// Formula property value objects represent the result of evaluating a formula described in the database's properties. These objects contain a type key and a key corresponding with the value of type. The value of a formula cannot be updated directly.
//
// ## Formula values may not match the Notion UI.
//
// Formulas returned in page objects are subject to a 25 page reference limitation. The Retrieve a page property endpoint should be used to get an accurate formula value.
type Formula struct {
	// Boolean formula property values contain a boolean within the boolean property.
	Boolean *bool `json:"boolean,omitempty"`
	Date    *Date `json:"date,omitempty"`

	// Number formula property values contain an optional number within the number property.
	Number *float32 `json:"number,omitempty"`

	// String formula property values contain an optional string within the string property.
	String *string     `json:"string,omitempty"`
	Type   FormulaType `json:"type"`
}

// FormulaType defines model for Formula.Type.
type FormulaType string

// Formula database property objects contain this configuration within the `formula` property.
type FormulaConfig struct {
	// Formula to evaluate for this property. You can read more about the syntax for formulas in the help center: https://notion.so/notion/Formulas-28f3f5c3ae644c59b4d862046ea6a541
	Expression string `json:"expression"`
}

// Page or database icon. It is either an emoji or a file.
type Icon struct {
	// Emoji character.
	Emoji *string `json:"emoji,omitempty"`

	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`

	// File objects contain this information within the `file` property.
	File *NotionFile `json:"file,omitempty"`

	// Type of icon.
	Type IconType `json:"type"`
}

// Type of icon.
type IconType string

// An inline link in a text.
type Link struct {
	// The web address
	Url string `json:"url"`
}

// Link Preview block objects return the originally pasted url.
//
// NOTE: The link_preview block will only be returned as part of a response. It cannot be created via the API.
type LinkPreview struct {
	// The originally pasted url used to create the mention
	Url string `json:"url"`
}

// LinkToPage defines model for LinkToPage.
type LinkToPage struct {
	// A unique identifier for a page, block, database, user, or option.
	DatabaseId *UUID `json:"database_id,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	PageId *UUID `json:"page_id,omitempty"`

	// Type of this link to page object.
	Type LinkToPageType `json:"type"`
}

// Type of this link to page object.
type LinkToPageType string

// Mention defines model for Mention.
type Mention struct {
	Database *Reference `json:"database,omitempty"`
	Date     *Date      `json:"date,omitempty"`

	// Link Preview block objects return the originally pasted url.
	//
	// NOTE: The link_preview block will only be returned as part of a response. It cannot be created via the API.
	LinkPreview *LinkPreview `json:"link_preview,omitempty"`
	Page        *Reference   `json:"page,omitempty"`

	// Type of the inline mention.
	Type MentionType `json:"type"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	User *User `json:"user,omitempty"`
}

// Type of the inline mention.
type MentionType string

// Every database should at least contain one property of type `title`.
type MinimalPropertyMetas struct {
	// Metadata that controls how a database property behaves.
	Title *PropertyMeta `json:"title,omitempty"`
}

// A unique identifier for a page, block, database, or user.
type NextCursor string

// File objects contain this information within the `file` property.
type NotionFile struct {
	// Date and time when the URL will expire.
	ExpiryTime time.Time `json:"expiry_time"`

	// Authenticated S3 URL to the file. The file URL will be valid for 1 hour but updated links can be requested if required.
	Url string `json:"url"`
}

// Number database property schema objects contain this configuration within the number property.
type NumberConfig struct {
	// How the number is displayed in Notion.
	Format NumberConfigFormat `json:"format"`
}

// How the number is displayed in Notion.
type NumberConfigFormat string

// The Page object contains the [property values](https://developers.notion.com/reference/property-value-object) of a single Notion page.
//
// All pages have a parent. If the parent is a [database](https://developers.notion.com/reference/database), the property values conform to the schema laid out database's [properties](https://developers.notion.com/reference/property-object). Otherwise, the only property value is the `title`.
//
// Page content is available as [blocks](https://developers.notion.com/reference/block). The content can be read using [retrieve block children](https://developers.notion.com/reference/get-block-children) and appended using [append block children](https://developers.notion.com/reference/patch-block-children).
type Page struct {
	// The archived status of the page.
	Archived bool `json:"archived"`

	// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
	Cover *File `json:"cover"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	CreatedBy *User `json:"created_by,omitempty"`

	// Date and time when this page was created. Formatted as an ISO 8601 date time string.
	CreatedTime *time.Time `json:"created_time,omitempty"`

	// Page or database icon. It is either an emoji or a file.
	Icon *Icon `json:"icon"`

	// A unique identifier for a page, block, database, user, or option.
	Id UUID `json:"id"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	LastEditedBy *User `json:"last_edited_by,omitempty"`

	// Date and time when this page was updated. Formatted as an ISO 8601 date time string.
	LastEditedTime time.Time `json:"last_edited_time"`

	// Always "page".
	Object string `json:"object"`

	// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
	Parent *Parent `json:"parent,omitempty"`

	// Properties of a page or database.
	Properties PropertyValueMap `json:"properties"`

	// The URL of the Notion page.
	Url string `json:"url"`
}

// Pages defines model for Pages.
type Pages []Page

// PagesList defines model for PagesList.
type PagesList struct {
	HasMore bool `json:"has_more"`

	// A unique identifier for a page, block, database, or user.
	NextCursor *NextCursor            `json:"next_cursor"`
	Object     string                 `json:"object"`
	Page       map[string]interface{} `json:"page"`
	Results    Pages                  `json:"results"`
	Type       string                 `json:"type"`
}

// Paragraph, heading, quote, toggle and list item block objects contain this information within their respective property.
type Paragraph struct {
	// The color of the block.
	Color    Color     `json:"color"`
	RichText RichTexts `json:"rich_text"`
}

// The `parent` property of a page or database contains these keys. Mandatory when creating, must be missing when updating.
type Parent struct {
	// A unique identifier for a page, block, database, user, or option.
	BlockId *UUID `json:"block_id,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	DatabaseId *UUID `json:"database_id,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	PageId *UUID `json:"page_id,omitempty"`

	// The type of the parent.
	Type ParentType `json:"type"`

	// Always true if the `type` is `workspace`.
	Workspace *bool `json:"workspace,omitempty"`
}

// The type of the parent.
type ParentType string

// User objects that represent people have the `type` property set to `person`. These objects also have these properties.
type Person struct {
	// Email address of person. This is only present if an integration has user capabilities that allow access to email addresses.
	Email openapi_types.Email `json:"email"`
}

// Metadata that controls how a database property behaves.
type PropertyMeta struct {
	// Checkbox database property schema objects have no additional configuration within the `checkbox` property.
	Checkbox *map[string]interface{} `json:"checkbox,omitempty"`

	// Created by database property objects have no additional configuration within the `created_by` property.
	CreatedBy *map[string]interface{} `json:"created_by,omitempty"`

	// Created time database property objects have no additional configuration within the `created_time` property.
	CreatedTime *map[string]interface{} `json:"created_time,omitempty"`

	// Date database property schema objects have no additional configuration within the `date` property.
	Date *map[string]interface{} `json:"date,omitempty"`

	// Email database property objects have no additional configuration within the `email` property.
	Email *map[string]interface{} `json:"email,omitempty"`

	// File database property schema objects have no additional configuration within the `file` property.
	Files *map[string]interface{} `json:"files,omitempty"`

	// Formula database property objects contain this configuration within the `formula` property.
	Formula *FormulaConfig `json:"formula,omitempty"`

	// A short identifier (not a UUID).
	Id string `json:"id"`

	// Last edited by database property objects have no additional configuration within the `last_edited_by` property.
	LastEditedBy *map[string]interface{} `json:"last_edited_by,omitempty"`

	// Last edited time database property objects have no additional configuration within the `last_edited_time` property.
	LastEditedTime *map[string]interface{} `json:"last_edited_time,omitempty"`
	MultiSelect    *PropertyOptionsWrapper `json:"multi_select,omitempty"`

	// The name of the property as it appears in Notion.
	Name string `json:"name"`

	// Number database property schema objects contain this configuration within the number property.
	Number *NumberConfig `json:"number,omitempty"`

	// People database property objects have no additional configuration within the `people` property.
	People *map[string]interface{} `json:"people,omitempty"`

	// Phone number database property objects have no additional configuration within the `phone_number` property.
	PhoneNumber *map[string]interface{} `json:"phone_number,omitempty"`
	Relation    *RelationConfiguration  `json:"relation,omitempty"`

	// Text database property schema objects have no additional configuration within the `rich_text` property.
	RichText *map[string]interface{} `json:"rich_text,omitempty"`

	// Rollup database property objects contain the following configuration within the `rollup` property.
	Rollup *RollupConfig           `json:"rollup,omitempty"`
	Select *PropertyOptionsWrapper `json:"select,omitempty"`

	// Status database properties cannot currently be configured via the API and so have no additional configuration within the `status` property.
	Status *map[string]interface{} `json:"status,omitempty"`

	// Title database property objects have no additional configuration within the `title` property.
	Title *map[string]interface{} `json:"title,omitempty"`

	// Type of the property.
	Type PropertyType `json:"type"`

	// URL database property objects have no additional configuration within the `url` property.
	Url *map[string]interface{} `json:"url,omitempty"`
}

// PropertyMetas defines model for PropertyMetas.
type PropertyMetas interface{}

// Multi-select or select option values.
type PropertyOption struct {
	// The color of the block.
	Color Color `json:"color"`

	// A unique identifier for a page, block, database, user, or option.
	Id   UUID   `json:"id"`
	Name string `json:"name"`
}

// An array of multi-select or select option values.
type PropertyOptions []PropertyOption

// PropertyOptionsWrapper defines model for PropertyOptionsWrapper.
type PropertyOptionsWrapper struct {
	// An array of multi-select or select option values.
	Options PropertyOptions `json:"options"`
}

// Type of the property.
type PropertyType string

// A property value defines the identifier, type, and value of a page property in a page object. It's used when retrieving and updating pages ex: Create and Update pages.
type PropertyValue struct {
	Checkbox *bool `json:"checkbox,omitempty"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	CreatedBy   *User      `json:"created_by,omitempty"`
	CreatedTime *time.Time `json:"created_time,omitempty"`
	Date        *Date      `json:"date,omitempty"`
	Email       *string    `json:"email,omitempty"`
	Files       *Files     `json:"files,omitempty"`

	// Formula property value objects represent the result of evaluating a formula described in the database's properties. These objects contain a type key and a key corresponding with the value of type. The value of a formula cannot be updated directly.
	//
	// ## Formula values may not match the Notion UI.
	//
	// Formulas returned in page objects are subject to a 25 page reference limitation. The Retrieve a page property endpoint should be used to get an accurate formula value.
	Formula *Formula `json:"formula,omitempty"`

	// Underlying identifier for the property. This identifier is guaranteed to remain constant when the property name changes. It may be a UUID, but is often a short random string.
	//
	// The id may be used in place of name when creating or updating pages.
	Id string `json:"id"`

	// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
	LastEditedBy *User `json:"last_edited_by,omitempty"`

	// An array of multi-select or select option values.
	MultiSelect *PropertyOptions `json:"multi_select,omitempty"`

	// Number property value objects contain a number within the `number` property.
	Number      *float32    `json:"number,omitempty"`
	People      *[]User     `json:"people,omitempty"`
	PhoneNumber *string     `json:"phone_number,omitempty"`
	Relation    *References `json:"relation,omitempty"`
	RichText    *RichTexts  `json:"rich_text,omitempty"`

	// Rollup property value objects represent the result of evaluating a rollup described in the database's properties. These objects contain a type key and a key corresponding with the value of type. The value of a rollup cannot be updated directly.
	//
	// ## Rollup values may not match the Notion UI.
	//
	// Rollups returned in page objects are subject to a 25 page reference limitation. The Retrieve a page property endpoint should be used to get an accurate formula value.
	Rollup *Rollup      `json:"rollup,omitempty"`
	Select *SelectValue `json:"select,omitempty"`
	Status *SelectValue `json:"status,omitempty"`
	Title  *RichTexts   `json:"title,omitempty"`

	// Type of the property.
	Type PropertyType `json:"type"`

	// URL property value objects contain a non-empty string within the url property. The string describes a web address.
	Url *string `json:"url,omitempty"`
}

// Properties of a page or database.
type PropertyValues interface{}

// Reference defines model for Reference.
type Reference struct {
	// A unique identifier for a page, block, database, user, or option.
	Id UUID `json:"id"`
}

// References defines model for References.
type References []Reference

// RelationConfiguration defines model for RelationConfiguration.
type RelationConfiguration struct {
	// A unique identifier for a page, block, database, user, or option.
	DatabaseId UUID `json:"database_id"`

	// By default, relations are formed as two synced properties across databases: if you make a change to one property, it updates the synced property at the same time. `synced_property_id` refers to the `id` of the property in the related database. This is usually a short string of random letters and symbols.
	SyncedPropertyId *string `json:"synced_property_id,omitempty"`

	// By default, relations are formed as two synced properties across databases: if you make a change to one property, it updates the synced property at the same time. `synced_property_name` refers to the `name` of the property in the related database.
	SyncedPropertyName string `json:"synced_property_name"`
}

// Rich text objects contain data for displaying formatted text, mentions, and equations. A rich text object also contains annotations for style information. Arrays of rich text objects are used [within property objects](https://developers.notion.com/reference/database-property) and [property value objects](https://developers.notion.com/reference/page-property-value) to create what a user sees as a single text value in Notion.
type RichText struct {
	// Style information which applies to the whole rich text object.
	Annotations Annotations `json:"annotations"`

	// Equation block objects contain this information within the `equation` property
	Equation *Equation `json:"equation,omitempty"`

	// The URL of any link or internal Notion mention in this text, if any.
	Href    *string  `json:"href"`
	Mention *Mention `json:"mention,omitempty"`

	// The plain text without annotations.
	PlainText string `json:"plain_text"`

	// Text objects contain this information within the `text` property of a RichText object.
	Text *Text `json:"text,omitempty"`

	// Type of this rich text object.
	Type RichTextType `json:"type"`
}

// Type of this rich text object.
type RichTextType string

// RichTexts defines model for RichTexts.
type RichTexts []RichText

// Rollup property value objects represent the result of evaluating a rollup described in the database's properties. These objects contain a type key and a key corresponding with the value of type. The value of a rollup cannot be updated directly.
//
// ## Rollup values may not match the Notion UI.
//
// Rollups returned in page objects are subject to a 25 page reference limitation. The Retrieve a page property endpoint should be used to get an accurate formula value.
type Rollup struct {
	// Array rollup property values contain an array of number, date, or string objects within the results property.
	Array *[]interface{} `json:"array,omitempty"`

	// Date rollup property values contain a date property value within the date property.
	Date     *time.Time `json:"date,omitempty"`
	Function string     `json:"function"`

	// Number rollup property values contain a number within the number property.
	Number *float32 `json:"number,omitempty"`

	// String rollup property values contain an optional string within the string property.
	String *string    `json:"string,omitempty"`
	Type   RollupType `json:"type"`
}

// RollupType defines model for Rollup.Type.
type RollupType string

// Rollup database property objects contain the following configuration within the `rollup` property.
type RollupConfig struct {
	// The function that is evaluated for every page in the relation of the rollup.
	Function RollupConfigFunction `json:"function"`

	// The `id` of the relation property this property is responsible for rolling up.
	RelationPropertyId string `json:"relation_property_id"`

	// The name of the relation property this property is responsible for rolling up.
	RelationPropertyName string `json:"relation_property_name"`

	// The `id` of the property of the pages in the related database that is used as an input to function.
	RollupPropertyId string `json:"rollup_property_id"`

	// The name of the property of the pages in the related database that is used as an input to `function`.
	RollupPropertyName string `json:"rollup_property_name"`
}

// The function that is evaluated for every page in the relation of the rollup.
type RollupConfigFunction string

// SelectValue defines model for SelectValue.
type SelectValue struct {
	// The color of the block.
	Color Color `json:"color"`

	// ID of the option. Contrary to the documentation, this is usally not a UUID.
	Id string `json:"id"`

	// Name of the option as it appears in Notion.
	//
	// If the select database property does not yet have an option by that name, it will be added to the database schema if the integration also has write access to the parent database.
	//
	// Note: Commas (",") are not valid for select values.
	Name string `json:"name"`
}

// Sort defines model for Sort.
type Sort struct {
	// Which way to sort.
	Direction SortDirection `json:"direction"`

	// The property to sort by.
	Property string `json:"property"`
}

// Which way to sort.
type SortDirection string

// Sorts defines model for Sorts.
type Sorts []Sort

// SyncedBlock defines model for SyncedBlock.
type SyncedBlock struct {
	SyncedFrom *SyncedFrom `json:"synced_from"`
}

// SyncedFrom defines model for SyncedFrom.
type SyncedFrom struct {
	// A unique identifier for a page, block, database, user, or option.
	BlockId *UUID          `json:"block_id,omitempty"`
	Type    SyncedFromType `json:"type"`
}

// SyncedFromType defines model for SyncedFrom.Type.
type SyncedFromType string

// Table defines model for Table.
type Table struct {
	// Whether or not the table has a column header. If true, the first row in the table will appear visually distinct from the other rows.
	HasColumnHeader bool `json:"has_column_header"`

	// Whether or not the table has a header row. If true, the first column in the table will appear visually distinct from the other columns.
	HasRowHeader bool `json:"has_row_header"`

	// Number of columns in the table. Note that this cannot be changed via the public API once a table is created.
	TableWidth int `json:"table_width"`
}

// Table of contents block objects contain the following information within the `table_of_contents` property.
type TableOfContents struct {
	// The color of the block.
	Color Color `json:"color"`
}

// Table row blocks contain this within the table_row property.
type TableRow struct {
	// Array of cell contents in horizontal display order. Each cell itself is an array of rich text objects.
	Cells []RichTexts `json:"cells"`
}

// Template defines model for Template.
type Template struct {
	RichText RichTexts `json:"rich_text"`
}

// Text objects contain this information within the `text` property of a RichText object.
type Text struct {
	// Text content. This field contains the actual content of your text and is probably the field you'll use most often.
	Content string `json:"content"`

	// An inline link in a text.
	Link *Link `json:"link"`
}

// TextFilter defines model for TextFilter.
type TextFilter struct {
	Contains string `json:"contains"`
}

// Title defines model for Title.
type Title struct {
	Id    string    `json:"id"`
	Title RichTexts `json:"title"`
	Type  string    `json:"type"`
}

// To do block objects contain this information within the `to_do` property.
type ToDo struct {
	// Whether the to_do is checked or not.
	Checked bool `json:"checked"`

	// The color of the block.
	Color    Color     `json:"color"`
	RichText RichTexts `json:"rich_text"`
}

// A unique identifier for a page, block, database, user, or option.
type UUID string

// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
type User struct {
	// Chosen avatar image.
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Bot       *Bot    `json:"bot,omitempty"`

	// A unique identifier for a page, block, database, user, or option.
	Id UUID `json:"id"`

	// User's name, as displayed in Notion.
	Name *string `json:"name,omitempty"`

	// Always "user"
	Object string `json:"object"`

	// User objects that represent people have the `type` property set to `person`. These objects also have these properties.
	Person *Person `json:"person,omitempty"`

	// Type of the user.
	Type *UserType `json:"type,omitempty"`
}

// Type of the user.
type UserType string

// Users defines model for Users.
type Users []User

// UsersList defines model for UsersList.
type UsersList struct {
	HasMore    bool                   `json:"has_more"`
	NextCursor *string                `json:"next_cursor,omitempty"`
	Object     string                 `json:"object"`
	Results    Users                  `json:"results"`
	Type       string                 `json:"type"`
	User       map[string]interface{} `json:"user"`
}

// File objects contain data about files uploaded to Notion as well as external files linked in Notion.
type Video struct {
	Caption RichTexts `json:"caption"`

	// An external file is any URL that isn't hosted by Notion.
	External *ExternalFile `json:"external,omitempty"`

	// File objects contain this information within the `file` property.
	File *NotionFile `json:"file,omitempty"`

	// Type of this file object.
	Type VideoType `json:"type"`
}

// Type of this file object.
type VideoType string

// A unique identifier for a page, block, database, user, or option.
type Id UUID

// The number of items from the full list desired in the response.
type PageSize float32

// If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
type StartCursor string

// A block object represents content within Notion. Blocks can be text, lists, media, and more. A page is a type of block, too!
//
// The optional fields are filled depending on the value of `type`.
type BlockResponse Block

// BlocksResponse defines model for BlocksResponse.
type BlocksResponse BlocksList

// DatabaseResponse defines model for DatabaseResponse.
type DatabaseResponse Database

// Something went wrong
type ErrorResponse Error

// The Page object contains the [property values](https://developers.notion.com/reference/property-value-object) of a single Notion page.
//
// All pages have a parent. If the parent is a [database](https://developers.notion.com/reference/database), the property values conform to the schema laid out database's [properties](https://developers.notion.com/reference/property-object). Otherwise, the only property value is the `title`.
//
// Page content is available as [blocks](https://developers.notion.com/reference/block). The content can be read using [retrieve block children](https://developers.notion.com/reference/get-block-children) and appended using [append block children](https://developers.notion.com/reference/patch-block-children).
type PageResponse Page

// PagesResponse defines model for PagesResponse.
type PagesResponse PagesList

// The User object represents a user in a Notion workspace. Users include full workspace members, and bots. Guests are not included.
type UserResponse User

// UsersResponse defines model for UsersResponse.
type UsersResponse UsersList

// DatabaseRequestBody defines model for DatabaseRequestBody.
type DatabaseRequestBody Database

// GetBlocksParams defines parameters for GetBlocks.
type GetBlocksParams struct {
	// The number of items from the full list desired in the response.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
	StartCursor *StartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// AppendBlocksJSONBody defines parameters for AppendBlocks.
type AppendBlocksJSONBody BlocksChildren

// QueryDatabaseJSONBody defines parameters for QueryDatabase.
type QueryDatabaseJSONBody DatabaseQuery

// CreatePageJSONBody defines parameters for CreatePage.
type CreatePageJSONBody Page

// UpdatePageJSONBody defines parameters for UpdatePage.
type UpdatePageJSONBody Page

// SearchJSONBody defines parameters for Search.
type SearchJSONBody map[string]interface{}

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// The number of items from the full list desired in the response.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// If supplied, this endpoint will return a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results.
	StartCursor *StartCursor `form:"start_cursor,omitempty" json:"start_cursor,omitempty"`
}

// AppendBlocksJSONRequestBody defines body for AppendBlocks for application/json ContentType.
type AppendBlocksJSONRequestBody AppendBlocksJSONBody

// CreateDatabaseJSONRequestBody defines body for CreateDatabase for application/json ContentType.
type CreateDatabaseJSONRequestBody DatabaseRequestBody

// UpdateDatabaseJSONRequestBody defines body for UpdateDatabase for application/json ContentType.
type UpdateDatabaseJSONRequestBody DatabaseRequestBody

// QueryDatabaseJSONRequestBody defines body for QueryDatabase for application/json ContentType.
type QueryDatabaseJSONRequestBody QueryDatabaseJSONBody

// CreatePageJSONRequestBody defines body for CreatePage for application/json ContentType.
type CreatePageJSONRequestBody CreatePageJSONBody

// UpdatePageJSONRequestBody defines body for UpdatePage for application/json ContentType.
type UpdatePageJSONRequestBody UpdatePageJSONBody

// SearchJSONRequestBody defines body for Search for application/json ContentType.
type SearchJSONRequestBody SearchJSONBody
